//java_Workspace04_test8_sort
//1. swap 메소드를 만들어서 정렬
	public static void sortModelAsc(Phone[] phones) {
		for(int i=0; i<phones.length-1; i++) {
			int minIndex = i;
			for(int j=i+1; j<phones.length; j++) {
				if(phones[i].getModel().compareTo(phones[j].getModel()) > 0) minIndex = j;
			}
			swap(phones, i, minIndex);
		}
	}
	
	public static void swap(Phone[] phones, int num1, int num2) {
		Phone temp = phones[num1];
		phones[num1] = phones[num2];
		phones[num2] = temp;
	}
	
	public static void sortQuantityDesc(Phone[] phones) {
		for(int i=0; i<phones.length-1; i++) {
			int maxIndex = i;
			for(int j=i+1; j<phones.length; j++) {
				if(phones[i].getQuantity() < phones[j].getQuantity()) maxIndex = j;
			}
			swap(phones, i, maxIndex);
		}
	}
//2. 해당 swap 메소드를 sort메소드 내에서 작성
 public void sortModelAsc(Phone[] phones){
        for(int index = 0; index < phones.length; index++){
            for(int i = 0; i < phones.length - 1; i++){
                if(phones[i].getModel().compareTo(phones[i + 1].getModel()) > 0){
                    Phone temp = phones[i];
                    phones[i] = phones[i + 1];
                    phones[i + 1] = temp;
                }
            }
        }
        for(int index = 0; index < phones.length; index++){
            System.out.println(index +" : "+ phones[index]);
        }

    }
    public void sortQuantityDesc(Phone[] phones){
        for(int index = 0; index < phones.length; index++){
            for(int i = 0; i < phones.length - 1; i++){
                if(phones[i].getQuantity() > phones[i + 1].getQuantity()){
                    Phone temp = phones[i];
                    phones[i] = phones[i + 1];
                    phones[i + 1] = temp;
                }
            }
        }
        for(int index = 0; index < phones.length; index++){
            System.out.println(index +" : "+ phones[index]);
        }

    }
//3. Comparator 오버라이딩
    public static void sortModelAsc(Phone[] phones) {
        Arrays.sort(phones, new Comparator<Phone>() {
            @Override
            public int compare(Phone o1, Phone o2) {
                return o1.getModel().compareTo(o2.getModel());
            }
        });
    }

    public static void sortQuantityDesc(Phone[] phones) {
        Arrays.sort(phones, new Comparator<Phone>() {
            @Override
            public int compare(Phone o1, Phone o2) {
                return o2.getQuantity() - o1.getQuantity();
            }
        });
    }
//4. 람다식 사용
	public void sortModelAsc(Phone[] phones) {
		
		ArrayList <Phone> al = new ArrayList();
		for (int i = 0; i < phones.length; i++) {
			al.add(phones[i]);
		}
		
		al.sort((Phone p1, Phone p2)-> p1.getModel().compareTo(p2.getModel()));
		for (int i = 0; i < phones.length; i++) {
			System.out.println(al.get(i));
		}
	}
	
	public void sortQuantityDesc(Phone[] phones) {
		ArrayList <Phone> al = new ArrayList();
		for (int i = 0; i < phones.length; i++) {
			al.add(phones[i]);
		}
		
		al.sort((Phone p1, Phone p2)-> p2.getQuantity() - p1.getQuantity());
		
		for (int i = 0; i < phones.length; i++) {
			System.out.println(al.get(i));
		}
	}
//5. 정렬 알고리즘의 퀵 정렬 사용
퀵 정렬(QuickSort)을 사용해보겠습니다. 퀵 정렬은 분할 정복(Divide and Conquer) 방법을 이용하여 
배열을 빠르게 정렬하는 알고리즘입니다. 아래는 퀵 정렬을 이용한 코드입니다:

java
Copy code
public void sortModelAsc(Phone[] phones) {
    quickSort(phones, 0, phones.length - 1);
    for (int index = 0; index < phones.length; index++) {
        System.out.println(index + " : " + phones[index]);
    }
}

private void quickSort(Phone[] phones, int low, int high) {
    if (low < high) {
        int partitionIndex = partition(phones, low, high);

        quickSort(phones, low, partitionIndex - 1);
        quickSort(phones, partitionIndex + 1, high);
    }
}

private int partition(Phone[] phones, int low, int high) {
    String pivot = phones[high].getModel();
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (phones[j].getModel().compareTo(pivot) <= 0) {
            i++;

            Phone temp = phones[i];
            phones[i] = phones[j];
            phones[j] = temp;
        }
    }

    Phone temp = phones[i + 1];
    phones[i + 1] = phones[high];
    phones[high] = temp;

    return i + 1;
}
이 코드에서 sortModelAsc 메서드는 여전히 Phone 배열을 인자로 받으며, 
퀵 정렬을 수행하는 quickSort 메서드와 파티션을 나누는 partition 메서드를 추가로 정의합니다. 
퀵 정렬은 배열을 분할하여 정렬하고, 분할된 부분 배열을 재귀적으로 정렬하는 방식으로 동작합니다.

퀵 정렬은 평균적으로 매우 효율적이지만, 
최악의 경우 시간 복잡도가 O(n^2)가 될 수 있으므로 
데이터가 특정한 조건에 따라 이미 정렬되어 있다면 성능이 저하될 수 있습니다. 
그러나 대부분의 경우에 빠른 속도를 보여주는 정렬 알고리즘입니다.